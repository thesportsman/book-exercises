flights %>%
filter(dest == "CAE") %>%
nrow()
flights %>%
filter(dest == "CAE") %>%
nrow()
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View("nycflights13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
view(flights)
view"(flights")
View(flights)
nrow(flights)
ncol(flights)
??flights
flights <- mutate(
flights,
time_lost_or_gained = arr_delay - dep_delay
)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(-time_lost_or_gained)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, -time_lost_or_gained)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, -time_lost_or_gained)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights %>%
mutate(
flights,
time_lost_or_gained = arr_delay - dep_delay
) %>%
arrange(flights, -time_lost_or_gained)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(
flights,
time_lost_or_gained = arr_delay - dep_delay
) %>%
arrange(flights, -time_lost_or_gained)
# Make a histogram of the amount of time gained using the `hist()` function
hist(time_lost_or_gained)
?hist
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights)
flights <- mutate(
flights,
time_lost_or_gained = arr_delay - dep_delay
)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, -time_lost_or_gained)
# Make a histogram of the amount of time gained using the `hist()` function
hist(time_lost_or_gained)
avg_gain <- summarise(
flights,
mean_gain_or_loss = mean(time_lost_or_gained)
)
View(avg_gain)
