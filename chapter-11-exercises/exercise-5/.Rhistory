print("Hello World")
print("Do the reading!")
2+0+1
print("Hello World")
print("Do the reading!")
2+0+1
print("Hello World")
print("Do the reading!")
# Comments are helpful
# First mistake
print "Hello World!"
# That's Better!
print("Hello World!!")
a_good_number <- 34
z <- a_good_number*2
z+a_good_number
a_good_number <- 9
z
z <- a_good_number*3
z+a_good_number
print(z)
y <- a_good_number
print(y)
a_good_number <- 34
y <-a_good_number
2+0+1
print("Hello World")
print("Do the reading!")
# First mistake
print "Hello World!"
# That's Better!
print("Hello World!")
a_good_number <- 34
z <- a_good_number*2
z+a_good_number
a_good_number <- 9
z
z <- a_good_number*3
z+a_good_number
print(z)
y <- a_good_number
print(y)
a_good_number <- 34
y <-a_good_number
print(a_good_number)
# Much Better!!
hours <- 20
hours <- 20
pay_rate <- 15.00
earnings <- hours*pay_rate
smallest_number <- min(1, 7, 1/2)
paste("The", "Laser", "Yes")
round(5/7, 3)
hours <- 40
pay_rate <- 15.00
earnings <- pay_rate*hours
paste("hello", "world")
?nchar
nchar(1234567)
# Create a variable `my_name` that contains your name
my_name <- Quinn Casper
# Create a variable `my_name` that contains your name
my_name <- quinn_casper
# Create a variable `my_name` that contains your name
my_name <-quinncasper
# Create a variable `my_name` that contains your name
my_name <- "quinncasper"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
first_name <- quinn_casper
first_name <- "Quinn"
paste(first_name)
fav_number <- 34
fav_number <- fav_number/2
fav_number <- fav_number/2
upcase <- toupper(first_name)
install.packages("stringr")
library("stringr")
word(lyric_e, 2, 4)
say_hello <- function(name) {
greeting <- paste("Hello", name)
print(greeting)
}
say_hello(Quinton)
say_hello("Quinton")
say_hello("laser")
greeting
say_hello <- function(name) {
greeting <- paste("Hello", name)
greeting
}
say_hello(Quinn)
say_hello("Q-bert")
install.packages("dplyr")
library("dplyr")
install.packages("pscl")
library("pscl")
View(presidentialElections)
votes <- select(presidentialElections, year, demVote)
View(votes)
select(presidentialElections, state:year)
presidentialElections <-mutate(
presidentialElections,
other_parties_vote = 100 - demVote,
abs_vote_difference = abs(demVote - other_parties_vote)
)
presidentialElections <-mutate(
presidentialElections,
other_parties_vote = 100 - demVote,
abs_vote_difference = abs(demVote - other_parties_vote)
)
View(presidentialElections)
presidentialElections <- arrange(presidentialElections, -year, demVote)
View(presidentialElections)
presidentialElections <- arrange(presidentialElections, -year, demVote)
average_votes <- summarise(
presidentialElections,
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
View(average_votes)
votes_2008 <- filter(presidentialElections, year == 2008)
View(votes_2008)
most_dem_votes <- filter(votes_2008, demVote == max(demVote))
View(most_dem_votes)
most_dem_state <- select(most_dem_votes, state)
View(most_dem_state)
most_dem_state <- presidentialElections %>%
filter(year == 2008) %>%
filter(demVote == max(demVote)) %>%
select(state)
most_dem_state <- presidentialElections %>%
filter(year == 2008) %>%
filter(demVote == max(demVote)) %>%
select(state)
View(most_dem_state)
View(most_dem_votes)
state_voting_summmary <- presidentialElections %>%
group_by(state) %>%
summarise(
mean_dem_vote = mean(demVote)
mean_other_parties = mean(other_parties_vote)
)
state_voting_summmary <- presidentialElections %>%
group_by(state) %>%
summarise(
mean_dem_vote = mean(demVote),
mean_other_parties = mean(other_parties_vote)
)
View(state_voting_summmary)
getwd
getwd()
cd desktop
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View("vehicles")
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
library("dpylr")
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
select(vehicles, make)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- select(vehicles, make)
View(manufacturers)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
?unique
unique(manufacturers)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique_makes <- unique(manufacturers)
View(unique_makes)
# Filter the data set for vehicles manufactured in 1997
ninety_seven_vehciles <- filter(vehicles, year == 1997)
View(ninety_seven_vehciles)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
ninety_seven_by_hwy_mpg <- order(ninety_seven_vehciles)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
?order
order(vehicles, year == 1997)
order(vehicles$year)
View(ninety_seven_vehciles)
order(vehicles$year, hwy)
order(vehicles$year, vehicles$hwy)
ninety_seven_hwy_mpg <- order(vehicles$year, vehicles$hwy)
View(ninety_seven_vehciles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles[ , vehicles$make]
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles[ , vehicles$make]
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles[[ , vehicles$make]]
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles[ , (vehicles$make)]
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles[ , vehicles$make == "make"]
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles[ , make]
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles["make",]
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique_makes <- unique(manufacturers)
View(manufacturers)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
manufacturers <- vehicles[, "make"]
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique_makes <- unique(manufacturers)
View(manufacturers)
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year ==1997, ]
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
View(makes)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
distinct(makes)
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- filter(vehicles, year == 1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(cars_1997, -hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997 <- mutate(cars_1997, average = (hwy + cty)/2
)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(vehicles, drive == "2-Wheel Drive", cty > 20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
cars_1997_2wd <- filter(vehicles, drive == "2-Wheel Drive", cty > 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(cars_1997_2wd, hwy == min(hwy))
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter(cars_1997_2wd, hwy == min(hwy)), id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(cars_1997_2wd, hwy == min(hwy)), id)
select(
filter(cars_1997_2wd,
hwy == min(hwy)
),
id
)
install.packages("nycflights13")
library(nycflights13)
View(nycflights13)
library("nycflights13)
library("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
install.packages("nycflights13")
library(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View("nycflights13")
data("Titanic")
data()
data("Titanic")
data("Titanic")
help("Titanic")
View("Titanic")
data()
help("Titanic")
data()
data(Titanic)
data("Titanic")
as.data.frame("Titanic")
data()
data("Titanic")
View(Titanic)
data(Titanic)
View(Titanic)
View(Titanic)
is.data.frame(Titanic)
as.data.frame(Titanic, stringsAsFactors = FALSE)
children <- Titanic[Titanic$Age == "Child", ]
children <- Titanic[Titanic$Age == "Child", "Age"]
children <- Titanic[ , "Age"]
children <- Titanic[,"Age"]
children <- Titanic[Titanic$Age == "Child","Age"]
as.data.frame(Titanic, stringsAsFactors = FALSE)
children <- Titanic[Titanic$Age == "Child","Age"]
children <- Titanic[, Age == "Child"]
children <- Titanic[, Titanic$Age == "Child"]
children <- Titanic[Titanic$Age == "Child",]
data(Titanic)
is.data.frame(Titanic)
as.data.frame(Titanic, stringsAsFactors = FALSE)
children <- Titanic[, "Age"]
children <- Titanic[2, "Age"]
paste(Titanic[, "Age"])
children <- Titanic[, Titanic$Age == "Child"]
children <- Titanic[, Age == "Child"]
children <- Titanic[, Titanic[[Age]] == "Child"]
children <- Titanic[, Titanic$Age == "Child"]
children_num <- sum(children$Freq)
paste(Titanic[Titanic$Freq == max(Titanic$Freq), ])
as.data.frame(Titanic, stringsAsFactors = FALSE)
children <- Titanic[, Titanic$Age == "Child"]
children_num <- sum(children$Freq)
paste(Titanic[Titanic$Freq == max(Titanic$Freq), ])
vehicles
data()
count(1:200)
library("stringr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
count(1:200)
?count
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
n()
?n
?pull
?sum
?select
?summary
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
View("nycflights13)"
View("nycflights13")
setwd("~/Desktop/Info_201/book-exercises/chapter-11-exercises/exercise-5")
View(nycflights13)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
read.csv("data/nycflights13", stringsAsFactors = FALSE)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
install.packages("nycflights13")
install.packages("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
View(nycflights13)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
View("nycflights13")
View(flights)
View(flights)
group_by(flights, month)
group_by(flights, month) %>%
mean(flights$dep_delay)
group_by(flights, month) %>%
group_by(flights, month)
View(flights)
group_by(flights, month)
group_by(flights, month) %>%
mean(dep_delay)
%>%
group_by(flights, month)
group_by(flights, month) %>%
summarize(
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
)
# Which month had the greatest average departure delay?
group_by(flights, month) %>%
filter(avg_dep_delay == max(avg_dep_delay))
avg_dep_delay <- group_by(flights, month) %>%
summarize(
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
)
# Which month had the greatest average departure delay?
group_by(flights, month) %>%
filter(avg_dep_delay == max(avg_dep_delay))
dep_deplay_by_month <- group_by(flights, month) %>%
summarize(
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
)
dep_deplay_by_month <- group_by(flights, month) %>%
summarize(
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
)
# Which month had the greatest average departure delay?
dep_deplay_by_month %>%
filter(avg_dep_delay == max(avg_dep_delay))
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(dep_deplay_by_month)
# You can look up these airports in the `airports` data frame!
data()
flights %>%
group_by(dest) %>%
summarise(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
arrange(-avg_arr_delay)
View(airports)
airports %>%
filter(faa == "CAE")
flights %>%
group_by(dest) %>%
summarise(
highest_avg_spd = mean(distance / time_hour)
)
flights %>%
filter(dest == "CAE") %>%
nrow()
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
View(flights)
flights %>%
group_by(dest) %>%
summarise(
avg_arr_del = mean(arr_delay)
)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avg_arr_delay <- flights %>%
group_by(dest) %>%
summarise(
avg_arr_del = mean(arr_delay)
)
View(avg_arr_delay)
# Create a dataframe of the average arrival delays for each _destination_, then
# use `left_join()` to join on the "airports" dataframe, which has the airport
# information
# Which airport had the largest average arrival delay?
avg_arr_delay <- flights %>%
group_by(dest) %>%
summarise(
avg_arr_del = mean(arr_delay, na.rm = TRUE)
)
View(avg_arr_delay)
left_join(avg_arr_delay, airports)
left_join(avg_arr_delay, airports, by "dest")
View(airports)
left_join(airports, avg_arr_delay, by = "faa", "dest")
View(flights)
